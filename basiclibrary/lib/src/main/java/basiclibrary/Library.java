/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Random;
import java.util.Set;
import java.util.HashSet;

public class Library {
    public int[] roll(int n) {
        // If a number less than 1 is passed, throw an error
        if (n < 1) {
            throw new IllegalArgumentException("Number of rolls must be greater than 0");
        }

        Random rand = new Random();
        int[] rolls = new int[n];

        for (int i = 0; i < rolls.length; i++) {
            //nextInt method returns value between 0 (inclusive) and specified bound (exclusive). For 1 - 6:
            int roll = rand.nextInt(6) + 1;
            rolls[i] = roll;
        }

        return rolls;
    }

    public boolean containsDuplicates(int[] arr) {
        // If an empty array is passed, throw an error
        if (arr.length == 0) {
            throw new IllegalArgumentException("Input array must not be empty.");
        }

        // I looked up how to use hash sets in Java because they're particularly suited to this kind of problem
        Set<Integer> set = new HashSet<>();

        for (int i = 0; i < arr.length; i++) {
            if (set.contains(arr[i])) {
                return true;
            }
            set.add(arr[i]);
        }

        return false;
    }

    public double calculateAverage(int[] arr) {
        if (arr.length == 0) {
            throw new IllegalArgumentException("Input array must not be empty.");
        }

        int sum = 0;

        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }

        return (double) sum / arr.length;
    }

    public int[] findLowestAverageSubArray(int[][] arr) {
        if (arr.length == 0) {
            throw new IllegalArgumentException("Input array must not be empty.");
        }

        // Initialize an array with nothing in it and a smallest average that caps at the primitive data type limit
        int[] lowestAverageSubArray = null;
        double lowestAverage = Double.MAX_VALUE;

        // Iterate over each array and update the smallestAverage and smallestSubarray
        for (int i = 0; i < arr.length; i++) {
            int[] subArray = arr[i];

            if (subArray.length == 0) {
                throw new IllegalArgumentException("Input array must not be empty.");
            }

            double average = calculateAverage(subArray);

            if (average < lowestAverage) {
                lowestAverage = average;
                lowestAverageSubArray = subArray;
            }
        }

        return lowestAverageSubArray;
    }
}
