/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class TheaterReviewTest {
    // Declaring ANSI_GREEN to color the successful test souts :)
    public static final String ANSI_GREEN = "\u001B[32m";
    // Declaring ANSI_RESET so that we can reset the color
    public static final String ANSI_RESET = "\u001B[0m";
    private Theater Theater;

    @BeforeEach
    public void setUp() {
        this.Theater = new Theater("AMC", 2);
    }
    @Test
    public void testConstructor() {
        TheaterReview classUnderTest = new TheaterReview("Mr. Critic", 5, "Savory movies and even savory-er popcorn!", Theater);
        assertEquals("Savory movies and even savory-er popcorn!", classUnderTest.getBody());
        assertEquals("Mr. Critic", classUnderTest.getAuthor());
        assertEquals(5, classUnderTest.getStars());
        assertEquals(Theater, classUnderTest.getDestination());
        System.out.println(ANSI_GREEN + "testConstructor() - test passed successfully" + ANSI_RESET);
    }

    @Test
    public void testConstructorWithMovieTitle() {
        TheaterReview classUnderTest = new TheaterReview("Mr. Critic", 1, "Why would they even show that? It's not even a movie.", Theater, "Koyaanisqatsi");
        assertEquals("Why would they even show that? It's not even a movie.", classUnderTest.getBody());
        assertEquals("Mr. Critic", classUnderTest.getAuthor());
        assertEquals(1, classUnderTest.getStars());
        assertEquals(Theater, classUnderTest.getDestination());
        assertEquals("Koyaanisqatsi", classUnderTest.getMovie());
        System.out.println(ANSI_GREEN + "testConstructor() - test passed successfully" + ANSI_RESET);
    }

    @Test void testConstructorThrowsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> new TheaterReview("Invalid Stars", 6, "Savory movies and even savory-er popcorn!", Theater));
        System.out.println(ANSI_GREEN + "testConstructorThrowsIllegalArgumentException() - test passed successfully" + ANSI_RESET);
    }

    @Test
    public void testToString() {
        TheaterReview classUnderTest = new TheaterReview("Mr. Critic", 5, "Savory movies and even savory-er popcorn!", Theater);
        assertEquals("TheaterReview { author: \"Mr. Critic\", stars: 5, body: \"Savory movies and even savory-er popcorn!\" }", classUnderTest.toString());
        System.out.println(ANSI_GREEN + "testToString() - test passed successfully" + ANSI_RESET);
    }

    @Test
    public void testToStringWithMovieTitle() {
        TheaterReview classUnderTest = new TheaterReview("Mr. Critic", 5, "Why would they even show that? It's not even a movie.", Theater, "Koyaanisqatsi");
        assertEquals("TheaterReview { author: \"Mr. Critic\", stars: 5, movieTitle: \"Koyaanisqatsi\", body: \"Why would they even show that? It's not even a movie.\" }", classUnderTest.toString());
        System.out.println(ANSI_GREEN + "testToString() - test passed successfully" + ANSI_RESET);
    }
}
