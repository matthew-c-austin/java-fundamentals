/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class RestaurantTest {
    // Declaring ANSI_GREEN to color the successful test souts :)
    public static final String ANSI_GREEN = "\u001B[32m";
    // Declaring ANSI_RESET so that we can reset the color
    public static final String ANSI_RESET = "\u001B[0m";

    @Test void testConstructor() {
        Restaurant classUnderTest = new Restaurant("Un Bien", 4, 2);
        assertEquals(classUnderTest.getName(), "Un Bien");
        assertEquals(classUnderTest.getStars(), 4, 0.00001);
        assertEquals(classUnderTest.getPriceCategory(), 2);
        System.out.println(ANSI_GREEN + "testConstructor() - test passed successfully" + ANSI_RESET);
    }

    @Test void testConstructorThrowsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> new Restaurant("Invalid Stars", 6, 2));
        assertThrows(IllegalArgumentException.class, () -> new Restaurant("Invalid Price Category", 4, 6));
        System.out.println(ANSI_GREEN + "testConstructorThrowsIllegalArgumentException() - test passed successfully" + ANSI_RESET);
    }

    @Test
    public void testToString() {
        Restaurant classUnderTest = new Restaurant("Un Bien", 4, 2);
        assertEquals("Restaurant { name: \"Un Bien\", stars: 4.0, priceCategory: \"$$\" }", classUnderTest.toString());
        System.out.println(ANSI_GREEN + "testToString() - test passed successfully" + ANSI_RESET);
    }

    @Test
    public void testRestaurantReviewAssociation() {
        Restaurant classUnderTest = new Restaurant("Un Bien", 4, 2);
        Review review = new Review("Mr. Critic", 5, "Tasty burritos and sandwiches!", classUnderTest);

        assertEquals(1, classUnderTest.getReviews().size());
        assertTrue(classUnderTest.getReviews().contains(review));
    }

    @Test
    public void testStarRatingUpdate() {
        Restaurant classUnderTest = new Restaurant("Un Bien", 2);
        Review reviewOne = new Review("Mr. Critic", 5, "Tasty burritos and sandwiches!", classUnderTest);
        Review reviewTwo = new Review("Mrs. Critic", 1, "Awful burritos and sandwiches!", classUnderTest);

        assertEquals(3, classUnderTest.getStars(), 0.001);

        // Add the same review again and check if the star rating remains the same
        classUnderTest.addReview(reviewOne);
        // Check if the average star rating is still 4.5
        assertEquals(3, classUnderTest.getStars(), 0.001);
    }

}
